{"version":3,"sources":["lib/styles/Global.js","lib/styles/Color.js","lib/layout/FullScreen.js","lib/layout/Columns.js","lib/layout/Bottom.js","lib/elements/Button.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","space","gray","gray15","gray30","gray45","gray60","gray75","gray90","FullScreen","state","width","height","updateWindowDimensions","_this","setState","window","innerWidth","innerHeight","this","addEventListener","removeEventListener","react_default","a","createElement","style","position","props","children","Component","Columns","display","justifyContent","Bottom","bottom","CustomButton","_this$props","text","styles","handleClick","disabled","onClick","App","LeftCount","RightCount","isWinner","recordLeftClick","clearInterval","intervalId","opponent","setInterval","message","winnerColor","className","FullScreen_FullScreen","flexDirection","alignItems","textAlign","padding","margin","fontSize","color","border","concat","backgroundColor","transition","Bottom_Bottom","Columns_Columns","Button_CustomButton","textTransform","borderRadius","flex","touchAction","Boolean","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.0de73de8.chunk.js","sourcesContent":["module.exports = {\n  space: 15,\n}","module.exports = {\n  gray: '#000',\n  gray15: '#262626',\n  gray30: '#4c4c4c',\n  gray45: '#727272',\n  gray60: '#989898',\n  gray75: '#bebebe',\n  gray90: '#e4e4e4'\n}","import React, { Component } from 'react';\n\nexport default class FullScreen extends Component {\n  state = {\n    width: 0,\n    height: 0,\n  }\n\n  componentDidMount() {\n    this.updateWindowDimensions(); \n    window.addEventListener('resize', this.updateWindowDimensions);\n  }\n\n  componentWillUnmount() {\n    window.removeEventListener('resize', this.updateWindowDimensions);\n  }\n  \n  updateWindowDimensions = () => {\n    this.setState({\n      width: window.innerWidth,\n      height: window.innerHeight,\n    });\n  }\n\n  render() {\n    return(\n      <div \n        style={\n          { \n            position: 'relative',\n            width: this.state.width,\n            height: this.state.height,\n          }\n        }>\n        { this.props.children }\n      </div>\n    ); \n  }\n}","import React, { Component } from 'react';\n\nexport default class Columns extends Component {\n  render() {\n    return(\n      <div \n        style={\n          { \n            display: 'flex', \n            justifyContent: 'space-between',\n          }\n        }>\n        { this.props.children }\n      </div>\n    ); \n  }\n}","import React, { Component } from 'react';\n\nexport default class Bottom extends Component {\n  render() {\n    return(\n      <div \n        style={\n          { \n            position: 'absolute',\n            bottom: 0,\n            width: '100%',\n          }\n        }>\n        { this.props.children }\n      </div>\n    ); \n  }\n}","import React, { Component } from 'react';\nimport Global from './../styles/Global';\nimport Color from './../styles/Color';\nimport { CSSTransition } from 'react-transition-group'; \n\nexport default class CustomButton extends Component {\n  render() {\n    const {\n      text,\n      styles,\n      handleClick,\n      disabled,\n    } = this.props; \n    return(\n      <button \n        style={ styles } \n        onClick={ handleClick }\n        disabled={ disabled }>\n        { text }\n      </button>\n    ); \n  }\n}","import React, { Component } from 'react';\nimport FullScreen from './lib/layout/FullScreen'; \nimport Columns from './lib/layout/Columns'; \nimport Bottom from './lib/layout/Bottom'; \nimport CustomButton from './lib/elements/Button'; \n\nclass App extends Component {\n  state = {\n    LeftCount: 50,\n    RightCount: 50,\n    isWinner: 'default'\n  }\n\n  componentDidMount() {\n    let intervalId = setInterval(this.opponent, 250);\n    this.setState({\n      intervalId: intervalId\n    });\n  }\n\n  componentWillUnmount() {\n    clearInterval(this.state.intervalId);\n  }\n\n  recordLeftClick = () => {\n    this.setState({\n      LeftCount: this.state.LeftCount + 5,\n      RightCount: this.state.RightCount - 5\n    });\n\n    if (this.state.LeftCount > 94) {\n      clearInterval(this.state.intervalId);\n      this.setState({ isWinner: 'winner' });\n    }\n  } \n\n  opponent = () => {\n    this.setState({\n      LeftCount: this.state.LeftCount - \n      5,\n      RightCount: this.state.RightCount + 5\n    });\n\n    if (this.state.RightCount > 99) {\n      this.setState({ isWinner: 'loser' });\n      clearInterval(this.state.intervalId);\n    }\n  } \n  render() {\n    const buttonStyles = {\n      padding: '40px 10px',\n      textTransform: 'uppercase',\n      borderRadius: 0,\n      backgroundColor: 'lightgray',\n      flex: '1 0',\n      border: '1px solid black',\n      touchAction: 'manipulation' // prevents ios double tab zoom/panning\n    }\n    const transition = 'width 1s linear'; \n    let message, winnerColor;\n    if (this.state.isWinner === 'loser') {\n      message = 'you lose'; \n      winnerColor = 'deeppink'; \n    } else if (this.state.isWinner === 'winner') {\n      message = 'you win'; \n      winnerColor = 'aquamarine'; \n    } else {\n      message = ''; \n      winnerColor = 'white'; \n    }\n    return (\n      <div className=\"app\">\n        <FullScreen>\n\n          {/*\n            (ﾉ◕ヮ◕)ﾉ*:･ﾟ✧ ✧ﾟ･: *ヽ(◕ヮ◕ヽ)\n          */}    \n          <div style={\n            {\n              display: 'flex',\n              flexDirection: 'column',\n              justifyContent: 'center',\n              alignItems: 'stretch',\n              height: '75vh',\n            }\n          }>\n            <div \n              style={\n                {\n                  display: 'inline-block', \n                  textAlign: 'center',\n                  padding: 20,\n                  margin: 50,\n                  fontSize: 50,\n                  color: winnerColor,\n                  border: `5px solid ${winnerColor}`,\n                  position: 'relative',\n                }\n            }>\n              { message }\n            </div>\n            <div style={{\n              display: 'flex',\n              justifyContent: 'space-between',\n            }}>\n              <div style={\n                {\n                  backgroundColor: 'aquamarine',\n                  width: this.state.LeftCount + '%',\n                  height: 50,\n                  transition: transition\n                }\n              }></div>\n              <div style={\n                {\n                  backgroundColor: 'deeppink',\n                  width: this.state.RightCount + '%',\n                  height: 50,\n                  transition: transition\n                }\n              }></div>\n            </div>\n          </div>\n\n          <Bottom>\n            <Columns>\n              <CustomButton\n                text=\"Fire!\"\n                styles={ buttonStyles } \n                handleClick={ this.recordLeftClick }\n                disabled={ this.state.LeftCount === 0 || this.state.LeftCount > 99 } />\n\n              {/* <CustomButton\n                text=\"Right\"\n                styles={ buttonStyles } \n                handleClick={ this.recordRightClick } /> */}\n            </Columns>\n          </Bottom>\n        </FullScreen>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}